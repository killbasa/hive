/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/heartbeat': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/metrics': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/version': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/auth/credentials/login': {
		post: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/auth/credentials/signup': {
		post: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/auth/verify': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/auth/logout': {
		post: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/users': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
		patch: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/settings': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
		patch: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/channels': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
		post: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/channels/{channelId}': {
		get: {
			parameters: {
				path: {
					channelId: string;
				};
			};
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/videos': {
		get: {
			parameters: {
				query: {
					page: number;
					type?: ('video' | 'short' | 'stream')[];
					status?: ('none' | 'new' | 'live' | 'upcoming' | 'past')[];
					downloadStatus?: ('ignored' | 'pending' | 'done')[];
					channelId?: string;
					search?: string;
					inProgress?: boolean;
				};
			};
			responses: {
				/** @description Default Response */
				200: {
					content: {
						'application/json': {
							videos: {
								id: string;
								channelId: string;
								playlistId: null | string;
								title: string;
								description: string;
								duration: null | number;
								watchProgress: number;
								watchCompleted: boolean;
								fileSize: null | number;
								uploadDate: null | string;
								type: 'video' | 'short' | 'stream';
								status: 'none' | 'new' | 'live' | 'upcoming' | 'past';
								downloadStatus: 'ignored' | 'pending' | 'done';
							}[];
							total: number;
						};
					};
				};
			};
		};
	};
	'/videos/ignore': {
		post: {
			requestBody: {
				content: {
					'application/json': {
						videoIds: string[];
					};
				};
			};
			responses: {
				/** @description Default Response */
				204: {
					content: never;
				};
			};
		};
	};
	'/videos/{videoId}': {
		get: {
			parameters: {
				path: {
					videoId: string;
				};
			};
			responses: {
				/** @description Default Response */
				200: {
					content: {
						'application/json': {
							id: string;
							channelId: string;
							playlistId: null | string;
							title: string;
							description: string;
							duration: null | number;
							watchProgress: number;
							watchCompleted: boolean;
							fileSize: null | number;
							uploadDate: null | string;
							type: 'video' | 'short' | 'stream';
							status: 'none' | 'new' | 'live' | 'upcoming' | 'past';
							downloadStatus: 'ignored' | 'pending' | 'done';
							comments: {
								id: number;
								videoId: string;
								text: string;
								author: string;
								authorId: string;
								timeText: string;
								isUploader: boolean;
								isFavorited: boolean;
							}[];
						};
					};
				};
			};
		};
		patch: {
			parameters: {
				path: {
					videoId: string;
				};
			};
			requestBody?: {
				content: {
					'application/json': {
						downloadStatus?: 'ignored' | 'pending';
						watchProgress?: number;
					};
				};
			};
			responses: {
				/** @description Default Response */
				200: {
					content: {
						'application/json': {
							id: string;
							channelId: string;
							playlistId: null | string;
							title: string;
							description: string;
							duration: null | number;
							watchProgress: number;
							watchCompleted: boolean;
							fileSize: null | number;
							uploadDate: null | string;
							type: 'video' | 'short' | 'stream';
							status: 'none' | 'new' | 'live' | 'upcoming' | 'past';
							downloadStatus: 'ignored' | 'pending' | 'done';
						};
					};
				};
			};
		};
	};
	'/downloads/queue': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/downloads/current': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/downloads/start': {
		post: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/downloads/stop': {
		post: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/downloads/scan': {
		post: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/downloads/status': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
	'/notifications': {
		get: {
			responses: {
				/** @description Default Response */
				200: {
					content: never;
				};
			};
		};
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		/** videoProgressSchema */
		'def-0': {
			progress?: number;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
